AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for application deployment - VPC, ECS Cluster, ECR, and supporting resources'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: Development
    
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24
    
  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24
  
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.3.0/24
    
  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.4.0/24
    
  ApplicationName:
    Description: Name of the application
    Type: String
    Default: apisix-app

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9180
          ToPort: 9180
          CidrIp: 0.0.0.0/0

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-${ApplicationName}-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECR Repository for each component
  NodeJSAppRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ApplicationName}-nodejs
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  APISIXRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ApplicationName}-apisix
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  APISIXDashboardRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ApplicationName}-dashboard
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  EtcdRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ApplicationName}-etcd
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  # IAM Roles for ECS Tasks and CodeDeploy
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # Nested Stack for CodeDeploy Resources
  CodeDeployStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://cf-templates-1uz573q4d57ls-us-east-1.s3.${AWS::Region}.amazonaws.com/code-deploy.yaml
      Parameters:
        VpcId: !Ref VPC
        PublicSubnet1: !Ref PublicSubnet1
        PublicSubnet2: !Ref PublicSubnet2
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        ECSCluster: !Ref ECSCluster
        EnvironmentName: !Ref EnvironmentName
        ApplicationName: !Ref ApplicationName
        NodeJSRepositoryURI: !GetAtt NodeJSAppRepository.RepositoryUri
        APISIXRepositoryURI: !GetAtt APISIXRepository.RepositoryUri
        APISIXDashboardRepositoryURI: !GetAtt APISIXDashboardRepository.RepositoryUri
        EtcdRepositoryURI: !GetAtt EtcdRepository.RepositoryUri
        CodeDeployServiceRole: !GetAtt CodeDeployServiceRole.Arn
        ECSTaskExecutionRole: !GetAtt ECSTaskExecutionRole.Arn
        ECSSecurityGroup: !Ref ECSSecurityGroup

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnets:
    Description: Public Subnets
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnets

  PrivateSubnets:
    Description: Private Subnets
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnets

  ECSCluster:
    Description: ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  NodeJSAppRepository:
    Description: ECR Repository for NodeJS App
    Value: !GetAtt NodeJSAppRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-NodeJSAppRepository

  APISIXRepository:
    Description: ECR Repository for APISIX
    Value: !GetAtt APISIXRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-APISIXRepository

  APISIXDashboardRepository:
    Description: ECR Repository for APISIX Dashboard
    Value: !GetAtt APISIXDashboardRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-APISIXDashboardRepository

  EtcdRepository:
    Description: ECR Repository for Etcd
    Value: !GetAtt EtcdRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-EtcdRepository