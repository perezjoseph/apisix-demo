AWSTemplateFormatVersion: '2010-09-09'
Description: 'Nested Stack for CodeDeploy resources and configurations'

Parameters:
  VpcId:
    Type: String
    Description: The VPC ID
    
  PublicSubnet1:
    Type: String
    Description: Public Subnet 1
    
  PublicSubnet2:
    Type: String
    Description: Public Subnet 2
    
  PrivateSubnet1:
    Type: String
    Description: Private Subnet 1
    
  PrivateSubnet2:
    Type: String
    Description: Private Subnet 2
    
  ECSCluster:
    Type: String
    Description: The ECS Cluster name
    
  EnvironmentName:
    Type: String
    Description: Environment name
    
  ApplicationName:
    Type: String
    Description: Name of the application
    
  NodeJSRepositoryURI:
    Type: String
    Description: NodeJS App ECR Repository URI
    
  APISIXRepositoryURI:
    Type: String
    Description: APISIX ECR Repository URI
    
  APISIXDashboardRepositoryURI:
    Type: String
    Description: APISIX Dashboard ECR Repository URI
    
  EtcdRepositoryURI:
    Type: String
    Description: Etcd ECR Repository URI
    
  CodeDeployServiceRole:
    Type: String
    Description: CodeDeploy Service Role ARN
    
  ECSTaskExecutionRole:
    Type: String
    Description: ECS Task Execution Role ARN
    
  ECSSecurityGroup:
    Type: String
    Description: ECS Security Group ID

Resources:
  # Load Balancers
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-${ApplicationName}-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Target Groups for blue-green deployment
  NodeJSTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-nodejs-blue
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  NodeJSTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-nodejs-green
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  APISIXTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-apisix-blue
      Port: 9080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /apisix/admin/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  APISIXTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-apisix-green
      Port: 9080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /apisix/admin/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  APISIXDashboardTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-dashboard-blue
      Port: 9000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  APISIXDashboardTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-dashboard-green
      Port: 9000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  # ALB Listeners
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APISIXTargetGroupBlue
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  NodeJSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref NodeJSTargetGroupBlue
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      ListenerArn: !Ref ALBListener
      Priority: 10

  APISIXDashboardListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APISIXDashboardTargetGroupBlue
      Conditions:
        - Field: path-pattern
          Values:
            - /dashboard/*
      ListenerArn: !Ref ALBListener
      Priority: 20

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-${ApplicationName}
      ComputePlatform: ECS

  # Task Definition for NodeJS (without service)
  NodeJSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-${ApplicationName}-nodejs
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: nodejs
          Image: !Ref NodeJSRepositoryURI
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${EnvironmentName}-${ApplicationName}-nodejs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # CloudWatch Log Groups
  NodeJSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${ApplicationName}-nodejs
      RetentionInDays: 30

  APISIXLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${ApplicationName}-apisix
      RetentionInDays: 30

  APISIXDashboardLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${ApplicationName}-dashboard
      RetentionInDays: 30

  EtcdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${ApplicationName}-etcd
      RetentionInDays: 30

Outputs:
  ALB:
    Description: Application Load Balancer
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALB

  NodeJSTargetGroupBlue:
    Description: NodeJS Blue Target Group
    Value: !Ref NodeJSTargetGroupBlue
    Export:
      Name: !Sub ${AWS::StackName}-NodeJSTargetGroupBlue

  NodeJSTargetGroupGreen:
    Description: NodeJS Green Target Group
    Value: !Ref NodeJSTargetGroupGreen
    Export:
      Name: !Sub ${AWS::StackName}-NodeJSTargetGroupGreen

  APISIXTargetGroupBlue:
    Description: APISIX Blue Target Group
    Value: !Ref APISIXTargetGroupBlue
    Export:
      Name: !Sub ${AWS::StackName}-APISIXTargetGroupBlue

  APISIXTargetGroupGreen:
    Description: APISIX Green Target Group
    Value: !Ref APISIXTargetGroupGreen
    Export:
      Name: !Sub ${AWS::StackName}-APISIXTargetGroupGreen

  APISIXDashboardTargetGroupBlue:
    Description: APISIX Dashboard Blue Target Group
    Value: !Ref APISIXDashboardTargetGroupBlue
    Export:
      Name: !Sub ${AWS::StackName}-APISIXDashboardTargetGroupBlue

  APISIXDashboardTargetGroupGreen:
    Description: APISIX Dashboard Green Target Group
    Value: !Ref APISIXDashboardTargetGroupGreen
    Export:
      Name: !Sub ${AWS::StackName}-APISIXDashboardTargetGroupGreen

  ECSCluster:
    Description: ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  CodeDeployApplication:
    Description: CodeDeploy Application
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub ${AWS::StackName}-CodeDeployApplication
